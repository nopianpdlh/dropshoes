// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orders        Order[]
  cart          Cart?
}

model Product {
  id          String    @id @default(cuid())
  name        String    @unique
  description String
  price       Float
  images      String[]
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  sizes       Size[]
  colors      Color[]
  stock       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model Category {
  id          String     @id @default(cuid())
  name        String
  products    Product[]
  parent      Category?  @relation("CategoryToSubcategory", fields: [parentId], references: [id])
  parentId    String?
  children    Category[] @relation("CategoryToSubcategory")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt

  @@unique([name, parentId])
}

model Size {
  id        String    @id @default(cuid())
  name      String    @unique
  products  Product[]
}

model Color {
  id        String    @id @default(cuid())
  name      String    @unique
  products  Product[]
}

model Cart {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @unique
  items     CartItem[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  size      String
  color     String
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  total         Float
  status        String      @default("PENDING") // PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELLED
  address       String
  customerName  String
  customerPhone String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  items         OrderItem[]
  user          User        @relation(fields: [userId], references: [id])

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
  size      String
  color     String
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
} 